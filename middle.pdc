# SkyDNS 

SkyDNS 
([Announcement Blog Post](http://blog.gopheracademy.com/skydns))
is a distributed service for announcement and discovery of services. It
leverages Raft ([](#Raft)) for high-availability and consensus, and utilizes DNS queries
to discover available services. This is done by using SRV records in DNS,
with special meaning given to subdomains, priorities and weights.

SkyDNS will also act as a forwarding DNS proxy, so that you can set your SkyDNS
instance as the primary DNS service in `/etc/resolv.conf` and SkyDNS will forward
and proxy requests for which it is not authoritative.

Besides serving SRV records, which include *all* the information you need to
connect to your service, SkyDNS will also return A records. This is useful if
you already know what port a particular service is using, and you just want a
list of IP addresses with known running instances.

The development of SkyDNS takes place on Github [](#SkyDNS-git). SkyDNS is written
in the Go language [](#Golang). It is licenced under the MIT License, see [](#license).

# Services

## Naming

Service names are registered by a submitting an HTTP query (with JSON data) to SkyDNS, 
see [](#service-management)
for more details. Querying SkyDNS can be done either via HTTP or via the DNS (see
[](#dns-service-discovery)).
SkyDNS divides the name for a service in different components, as follows:

Name:
:   The name of your service, e.g., "rails" or "web". Note that in this
    document we sometimes refer to this as Service.

Environment:
:   Denotes the environment of the service, e.g. "production" or "testing".

Region:
:   Where do these hosts live, e.g. "east", "west" or even "test".

Version:
:   A version string, e.g. "1.0.1". Note that any dots in this string are 
    converted to hyphens: `-`.

Host:
:   The hostname of a machine running the service.

A service name will use these components in a fixed order:

    "Host" "Version" "Region" "Name" "Environment"
^[fig:servicename::A fully qualified SkyDNS service name.]
    
Each registered service has a time to live (TTL). When the TTL expires the services
is expunged from SkyDNS.

# Service Management

SkyDNS exposes a RESTful (TODO: REF) interface. There are two entry points:

1. `/skydns/services/UUID`, used for service management.
1. `/skydns/callbacks/UUID`, used for callback management.

The UUID (TODO: REF 4122) is generated *by the client* and used the identifier for the service.
Each request MUST carry a JSON [](#RFC4627) payload with is defined in the sections below.

SkyDNS also supports a shared secret which is used for authorization.

## Registration

When registering a service a client generates an UUID (denoted $UUID here) and makes a HTTP PUT request to
`/skydns/services/$UUID` with the following JSON payload:

    { 
      "Name":"TestService",
      "Environment":"Production",
      "Region":"Test",
      "Version":"1.0.0",
      "Host":"web1.example.com",
      "Port":9000,
      "TTL":10
    }
^[fix:json-payload-add::JSON payload definition when registring a service with SkyDNS.]

Note: the are new elements here:

Port:
:   Specifies the port where the service runs.

TTL:
:   Specifies the time to live (TTL) for this services in seconds. When the TTL expires
    the services is removed from SkyDNS.

If a service with this $UUID already exists you will receive back an HTTP status
code of: **409 Conflict**

When using HTTP authorization and the wrong password SkyDNS will return an HTTP
status code of: **403 Forbidden** 

If successful SkyDNS will return an HTTP status code of: **201 Created**
SkyDNS will now have an entry for your service that will live for the number
of seconds supplied in your TTL (10 seconds in our example), unless you send a
heartbeat to update the TTL.

Note that instead of a hostname you can also use an IP address (IPv4 or IPV6),
in that case SkyDNS will make up an hostname: `$UUID.skydns.local`. 

TODO(miek): Not specifying all the elements, sane defaults?

## Heartbeat
SkyDNS requires that services submit an HTTP request to update their TTL within
the TTL they last supplied. If a service fails to do so within this time frame
SkyDNS will expire the service automatically. This will allow for nodes to fail
and DNS to reflect this quickly (also see [](#call-backs)).

The TTL can be updated by sending an HTTP PATCH request to SkyDNS 
(`/skydns/services/$UUID`) with an updated
TTL: `{ "TTL":20 }`.

TODO(miek): patch other things too.

## Deregistration
To remove a service from SkyDNS without waiting for the TTL to expire, you simply send an HTTP DELETE,
without any JSON data to `/skydns/services/$UUID`.

## Call backs
Registering a call back is similar to registering a service, the URL for registering call backs
is `/skydns/services/$CUUID`, where `$CUUID` is the UUID the client generates for this call back.
A service that
registers a call back will receive an HTTP request, every time something changes
in the service definition the callback is executed. Currently they are called when the
service is deleted.

    { 
      "Name":"TestService"
      "Environment":"Production"
      "Region":"Test"
      "Version":"1.0.0"
      "Host":"web1.example.com"
      "Reply":"web2.example.com",
      "Port":5441
    }
^[fix:json-payload-callback::JSON payload definition when registring a callback with SkyDNS.]

First the service for which this callback is added is named. Then the call back return address
is specified:

Reply:
:   Reply back to this address.

Port:
:   Reply back to this port.

Thus in this case it will result in the call back being sent to `web2.example.com` on port 5441. The
callback itself will be a HTTP DELETE, with the name of the service as the JSON payload:

    { 
      "Name":"TestService"
      "Environment":"Production"
      "Region":"Test"
      "Version":"1.0.0"
      "Host":"web1.example.com"
    }


TODO(miek): failed callback registration, deleting callbacks (not supported).

# DNS Service Discovery
SkyDNS exports the services via HTTP and DNS. When using the DNS for service discovery even
unchanged clients can be used. Queries to SkyDNS can contain wildcards or leave parts of the
service name out. Recall the elements of a service name from [](#fig:servicename).
The domain syntax when querying follows a pattern where the right
most positions are more generic, than the subdomains to their left.
This allows for you to supply only the positions you care about:

Elements in the Request     Result
-----------------------     --------
H. V. R. N. E.              A specific host 
V. R. N. E.                 All hosts, disregarding the hostname
R. N. E.                    All hosts in this region
N. E.                       All hosts in this environment/name
E.                          All hosts in this environment

^[tab:leavingout::Making requests less and less specific. In this table the following abbreviations
are used: H. is Host, V. is Version, R. is Region, N. is Name and E. is for Environment.]

## Wildcards
In addition to leaving elements out, it is something convenient to leave out names
"in the middle". This is supported in SkyDNS by means of wildcards. The wildcard
character is `*` (without the quotes). The wildcard can be places anywhere in a
service name, making that element match anything. Note the following two service
names are equivalent.

    Host Version Region Name Environment
      *  Version Region Name Environment

TODO(miek): more examples.

## Record Types
You can query SkyDNS for IPv4 addresses, IPv6 addresses and server records, A, AAAA and
SRV records respectively.

Services can be found by querying SkyDNS via any DNS client or utility. 

<!--
- east.*.*.production.skydns.local - Would return all services in the East region, that are a part of the production environment.

- authservice.production.skydns.local - For instance would return all services with the name AuthService in the production environment, regardless of the Version, Region, or Host
- 1-0-0.authservice.production.skydns.local - Is the same as above but restricting it to only version 1.0.0
- east.1-0-0.authservice.production.skydns.local - Would add the restriction that the services must be running in the East region

A AAAA SRV records queries
-->

# HTTP Service Discovery 
Currently you may only retrieve a service's info by UUID of the service, in the
future we may implement querying of the services similar to the DNS interface.

# Implementation
The current implementation of SkyDNS ([](#SkyDNS-git), consists out of server and a client
library. This client library is also used in a command line tool `skydnsctl` which allows for
easy registration and querying of SkyDNS.

## DNS Forwarding
By specifying nameservers on the `skydns` command line, you create a DNS
forwarding proxy. Requests for which SkyDNS isn't authoritative
for will be forwarded and proxied back to the client. This means that you can set
SkyDNS as the primary DNS server and use it for both service discovery and normal DNS operations. 

When provided with more than one nameserver SkyDNS will round robin between the them to spread the load.

> Please test this before relying on it in production, as there may be edge cases
> that don't work as planned.

# Examples

Below we will add and query for services in SkyDNS. It is assumed SkyDNS is running on port 8080
on localhost for HTTP and on port 1053 for DNS. For `skydnsctl` we use an environment variable:

    export SKYDNS=http://localhost:8080
    export SKYDNS_DNSPORT=1053

The following services will be added:

Host              Version    Region   Name   Environment
----              --------   -------  ----   -----------
web1.example.com.  1.0.0      east     web   production
web2.example.com.  1.0.0      west     web   production
web3.example.com.  1.0.1      east     web   testing

All running on port 8008 and initially with a TTL of 100 seconds. We used the open source tool
`uuidgen` (TODO:REF) for generation the UUID.

    % skydnsctl add $(uuidgen) \
    '{"Name":"web","Environment":"production","Region":"east","Version":"1.0.0",
      "Host":"web1.example.com","Port":8008,"TTL":100}' 
    e68a2880-5367-423d-9fd8-e665bffcb426 added to skydns

    % skydnsctl add $(uuidgen) \
    '{"Name":"web","Environment":"production","Region":"west","Version":"1.0.0",
      "Host":"web2.example.com","Port":8008,"TTL":100}'
    4f890a83-9704-424f-aa41-d120185cb427 added to skydns

    % skydnsctl add $(uuidgen) \
    '{"Name":"web","Environment":"testing","Region":"east","Version":"1.0.1",
      "Host":"web3.example.com","Port":8008,"TTL":100}'
    cc5aeaa5-02a5-4d44-91d8-cec4f950af2e

With `skydnsctl -json` we can list all services (in JSON format) that are now registered in 
SkyDNS.

# Security Considerations

Security depends very much on the randomness of the generated UUIDs

TODO(miek)

# Projects Using SkyDNS

Skydock:
:   Skydoc [](#SkyDock-git) works with Docker (TODO:ref) containers. Skydock monitors docker 
    events when containers start, 
    stop, die, get killed, etc and inserts records into SkyDNS. 
    This allows standard DNS queries to discover services running inside (other) docker containers. 
