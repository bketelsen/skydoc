



                 SkyDNS: Distributed Service Discovery

Abstract

   SkyDNS is a distributed service for announcement and discovery of
   services.  It leverages Raft for high-availability and consensus, and
   utilizes DNS queries to discover available services.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on July 25, 2014.

Copyright Notice

   Copyright (c) 2014 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  SkyDNS  . . . . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Services  . . . . . . . . . . . . . . . . . . . . . . . . . .   2
     2.1.  Naming  . . . . . . . . . . . . . . . . . . . . . . . . .   2
   3.  Service Management  . . . . . . . . . . . . . . . . . . . . .   3
     3.1.  Registration  . . . . . . . . . . . . . . . . . . . . . .   3
     3.2.  Heartbeat . . . . . . . . . . . . . . . . . . . . . . . .   4



Ketelsen, et al.          Expires July 25, 2014                 [Page 1]

Internet-Draft                   SkyDNS                     January 2014


     3.3.  Deregistration  . . . . . . . . . . . . . . . . . . . . .   5
     3.4.  Call backs  . . . . . . . . . . . . . . . . . . . . . . .   5
   4.  Service Discovery . . . . . . . . . . . . . . . . . . . . . .   6
     4.1.  DNS . . . . . . . . . . . . . . . . . . . . . . . . . . .   6
     4.2.  HTTP  . . . . . . . . . . . . . . . . . . . . . . . . . .   6
   5.  Implementation  . . . . . . . . . . . . . . . . . . . . . . .   6
   6.  Security Considerationso  . . . . . . . . . . . . . . . . . .   6
   7.  References  . . . . . . . . . . . . . . . . . . . . . . . . .   6
     7.1.  Normative References  . . . . . . . . . . . . . . . . . .   0
     7.2.  URIs  . . . . . . . . . . . . . . . . . . . . . . . . . .   6
   Appendix A.  License  . . . . . . . . . . . . . . . . . . . . . .   6
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .   7

1.  SkyDNS

   SkyDNS (Announcement Blog Post [1]) is a distributed service for
   announcement and discovery of services.  It leverages Raft ([Raft])
   for high-availability and consensus, and utilizes DNS queries to
   discover available services.  This is done by using SRV records in
   DNS, with special meaning given to subdomains, priorities and
   weights.

   SkyDNS will also act as a forwarding DNS proxy, so that you can set
   your SkyDNS instance as the primary DNS service in "/etc/resolv.conf"
   and SkyDNS will forward and proxy requests for which it is not
   authoritative.

   Besides serving SRV records, which include _all_ the information you
   need to connect to your service, SkyDNS will also return A records.
   This is useful if you already know what port a particular service is
   using, and you just want a list of IP addresses with known running
   instances.

   The development of SkyDNS takes place on Github ([SkyDNS-git]).
   SkyDNS is written in the Go language ([Golang]).  It is licenced
   under the MIT License, see []#(License).

2.  Services

2.1.  Naming

   Service names are registered by a submitting an HTTP query (with JSON
   data) to SkyDNS, see Section 3 for more details.  Querying SkyDNS can
   be done either via HTTP or via the DNS (see Section 4).  SkyDNS
   divides the name for a service in different components, as follows:

   Name:  The name of your service, e.g., "rails" or "web".  Note that
      in this document we sometimes refer to this as Service.



Ketelsen, et al.          Expires July 25, 2014                 [Page 2]

Internet-Draft                   SkyDNS                     January 2014


   Environment:  Denotes the environment of the service, e.g.
      "production" or "testing".

   Region:  Where do these hosts live, e.g. "east", "west" or even
      "test".

   Version:  A version string, e.g. "1.0.1".

   Host:  The hostname of a machine running the service.

   A service name will use these components in a fixed order:

   "Host" "Version" "Region" "Name" "Environment"

   Each registered service has a time to live (TTL).  When the TTL
   expires the services is expunged from SkyDNS.

3.  Service Management

   SkyDNS exposes a RESTful (TODO: REF) interface.  There are two entry
   points:

   1.  "/skydns/services/UUID", used for service management.

   2.  "/skydns/callbacks/UUID", used for callback management.

   The UUID (TODO: REF) is generated _by the client_ and used the
   identifer for the service.  Each request MUST carry a JSON [RFC4627]
   payload with is defined in the sections below.

   SkyDNS also supports a shared secret which is used for
   authoritzation.

3.1.  Registration

   Whe registring a service a client generates an UUID (denoted $UUID
   here) and makes a HTTP PUT request to `/skydns/services/$UUID` with
   the following JSON payload:













Ketelsen, et al.          Expires July 25, 2014                 [Page 3]

Internet-Draft                   SkyDNS                     January 2014


   {
     "Name":"TestService",
     "Environment":"Production",
     "Region":"Test",
     "Version":"1.0.0",
     "Host":"web1.example.com",
     "Port":9000,
     "TTL":10
   }

     Figure 1: JSON payload definition when registring a service with
                                  SkyDNS.

   Note: the are new elements here:

   Port:  Specifies the port where the service runs.

   TTL:  Specifies the time to live (TTL) for this services in seconds.
      When the TTL expires the services is removed from SkyDNS.

   If a service with this $UUID already exists you will receive back an
   HTTP status code of: *409 Conflict*

   When using HTTP authorization and the wrong password SkyDNS will
   return an HTTP status code of: *403 Forbidden*

   If successful SkyDNS will return an HTTP status code of: *201
   Created* SkyDNS will now have an entry for your service that will
   live for the number of seconds supplied in your TTL (10 seconds in
   our example), unless you send a heartbeat to update the TTL.

   Note that instead of a hostname you can also use an IP address (IPv4
   or IPV6), in that case SkyDNS will make up an hostname:
   "$UUID.skydns.local".

3.2.  Heartbeat

   SkyDNS requires that services submit an HTTP request to update their
   TTL within the TTL they last supplied.  If a service fails to do so
   within this timeframe SkyDNS will expire the service automatically.
   This will allow for nodes to fail and DNS to reflect this quickly
   (also see Section 3.4).

   The TTL can be updated by sending an HTTP PATCH request to SkyDNS ("/
   skydns/services/$UUID") with an updated TTL: "{ "TTL":20 }".

   TODO(miek): patch other things too.




Ketelsen, et al.          Expires July 25, 2014                 [Page 4]

Internet-Draft                   SkyDNS                     January 2014


3.3.  Deregistration

   To remove a service from SkyDNS without waiting for the TTL to
   expire, you simply send an HTTP DELETE, without any JSON data to "/
   skydns/services/$UUID".

3.4.  Call backs

   Registering a call back is similar to registering a service, the URL
   for registering call backs is "/skydns/services/$CUUID", where
   "$CUUID" is the UUID the client generates for this call back.  A
   service that registers a call back will receive an HTTP request,
   every time something changes in the service definition the callback
   is executed.  Currently they are called when the service is deleted.

   {
     "Name":"TestService"
     "Environment":"Production"
     "Region":"Test"
     "Version":"1.0.0"
     "Host":"web1.example.com"
     "Reply":"web2.example.com",
     "Port":5441
   }

     Figure 2: JSON payload definition when registring a callback with
                                  SkyDNS.

   First the service for which this callback is added is named.  Then
   the call back return address is specified:

   Reply:  Reply back to this address.

   Port:  Reply back to this port.

   Thus in this case it will result in the call back being sent to
   "web2.example.com" on port 5441.  The callback itself will be a HTTP
   DELETE, with the name of the service as the JSON payload:

   {
     "Name":"TestService"
     "Environment":"Production"
     "Region":"Test"
     "Version":"1.0.0"
     "Host":"web1.example.com"
   }





Ketelsen, et al.          Expires July 25, 2014                 [Page 5]

Internet-Draft                   SkyDNS                     January 2014


   TODO(miek): failed callback registration, deleting callbacks (not
   supported).

4.  Service Discovery

4.1.  DNS

4.2.  HTTP

   TODO

5.  Implementation

   The current implementation of SkyDNS ([SkyDNS-git], consists out of
   server and a client library.  This client library is used in a
   command line tool "skydnsctl" which allows for easy registration and
   querying of SkyDNS.

6.  Security Considerationso

   Security depends very much on the randomness of the generated UUIDs

   TODO

7.  References

   [Golang]   "The Go Programming Language", 2011.

   [RFC4627]  Crockford, D., "The application/json Media Type for
              JavaScript Object Notation (JSON)", RFC 4627, July 2006.

   [Raft]     Ongaro, D. and J. Ousterhout, "In Search of an
              Understandable Consensus Algorithm", October 2013.

   [SkyDNS-git]
              Martin, E., Ketelsen, B., Gieben, R., Carey, C., and C.
              Crosby, "SkyDNS Git repository", 2012.

7.2.  URIs

   [1] http://blog.gopheracademy.com/skydns

Appendix A.  License

   The MIT License (MIT)

   Copyright (C) 2013 Erik St. Martin, Brian Ketelsen




Ketelsen, et al.          Expires July 25, 2014                 [Page 6]

Internet-Draft                   SkyDNS                     January 2014


   Permission is hereby granted, free of charge, to any person obtaining
   a copy of this software and associated documentation files (the
   "Software"), to deal in the Software without restriction, including
   without limitation the rights to use, copy, modify, merge, publish,
   distribute, sublicense, and/or sell copies of the Software, and to
   permit persons to whom the Software is furnished to do so, subject to
   the following conditions:

   The above copyright notice and this permission notice shall be
   included in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
   BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
   ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
   CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.

Authors' Addresses

   Brian Ketelsen

   Email: bketelsen@gmail.com


   Erik St. Martin

   Email: alakriti@gmail.com


   R. (Miek) Gieben

   Email: miek@miek.nl
   URI:   http://miek.nl















Ketelsen, et al.          Expires July 25, 2014                 [Page 7]
